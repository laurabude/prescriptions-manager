{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { AnonymousSubject } from 'rxjs/internal/Subject';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nconst WS_URL = 'ws://127.0.0.1:9091/services';\nexport class ReceivedMessage {}\nexport class WebsocketService {\n  constructor() {\n    this.messages = this.connect(WS_URL).pipe(map(response => {\n      console.log(JSON.parse(response.data));\n      let data = JSON.parse(response.data);\n      return data;\n    }));\n  }\n  connect(url) {\n    if (!this.subject) {\n      this.subject = this.create(url);\n      console.log('Successfully connected: ' + url);\n    }\n    return this.subject;\n  }\n  create(url) {\n    let ws = new WebSocket(url);\n    let observable = new Observable(obs => {\n      ws.onmessage = obs.next.bind(obs);\n      ws.onerror = obs.error.bind(obs);\n      ws.onclose = obs.complete.bind(obs);\n      return ws.close.bind(ws);\n    });\n    let observer = {\n      error: null,\n      complete: null,\n      next: data => {\n        console.log('Message sent to websocket: ', data);\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify(data));\n        }\n      }\n    };\n    return new AnonymousSubject(observer, observable);\n  }\n}\nWebsocketService.ɵfac = function WebsocketService_Factory(t) {\n  return new (t || WebsocketService)();\n};\nWebsocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebsocketService,\n  factory: WebsocketService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAkB,MAAM;AAC3C,SAASC,gBAAgB,QAAQ,uBAAuB;AAExD,SAASC,GAAG,QAAQ,gBAAgB;;AAEpC,MAAMC,MAAM,GAAG,8BAA8B;AAM7C,OAAM,MAAOC,eAAe;AAyB5B,OAAM,MAAOC,gBAAgB;EAI3BC;IACE,IAAI,CAACC,QAAQ,GAA6B,IAAI,CAACC,OAAO,CAACL,MAAM,CAAC,CAACM,IAAI,CACjEP,GAAG,CAAEQ,QAAsB,IAAqB;MAC9CC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACtC,IAAIA,IAAI,GAAGF,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAACK,IAAI,CAAC;MACpC,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEOP,OAAO,CAACQ,GAAG;IAChB,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAG,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC;MAC/BL,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGI,GAAG,CAAC;;IAE/C,OAAO,IAAI,CAACC,OAAO;EACrB;EAEQC,MAAM,CAACF,GAAG;IAChB,IAAIG,EAAE,GAAG,IAAIC,SAAS,CAACJ,GAAG,CAAC;IAC3B,IAAIK,UAAU,GAAG,IAAIrB,UAAU,CAAEsB,GAA2B,IAAI;MAC9DH,EAAE,CAACI,SAAS,GAAGD,GAAG,CAACE,IAAI,CAACC,IAAI,CAACH,GAAG,CAAC;MACjCH,EAAE,CAACO,OAAO,GAAGJ,GAAG,CAACK,KAAK,CAACF,IAAI,CAACH,GAAG,CAAC;MAChCH,EAAE,CAACS,OAAO,GAAGN,GAAG,CAACO,QAAQ,CAACJ,IAAI,CAACH,GAAG,CAAC;MACnC,OAAOH,EAAE,CAACW,KAAK,CAACL,IAAI,CAACN,EAAE,CAAC;IAC1B,CAAC,CAAC;IACF,IAAIY,QAAQ,GAAG;MACbJ,KAAK,EAAE,IAAI;MACXE,QAAQ,EAAE,IAAI;MACdL,IAAI,EAAGT,IAAY,IAAI;QACrBJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEG,IAAI,CAAC;QAChD,IAAII,EAAE,CAACa,UAAU,KAAKZ,SAAS,CAACa,IAAI,EAAE;UACpCd,EAAE,CAACe,IAAI,CAACrB,IAAI,CAACsB,SAAS,CAACpB,IAAI,CAAC,CAAC;;MAEjC;KACD;IACD,OAAO,IAAId,gBAAgB,CAAe8B,QAAQ,EAAEV,UAAU,CAAC;EACjE;;AAzCWhB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA+B,SAAhB/B,gBAAgB;AAAA","names":["Observable","AnonymousSubject","map","WS_URL","ReceivedMessage","WebsocketService","constructor","messages","connect","pipe","response","console","log","JSON","parse","data","url","subject","create","ws","WebSocket","observable","obs","onmessage","next","bind","onerror","error","onclose","complete","close","observer","readyState","OPEN","send","stringify","factory"],"sourceRoot":"","sources":["/Users/lauraghimici/Documents/Automatica si Informatica Aplicata /MASTER/Anul 1/Sem 1/Proiect-semestru/frontend/src/app/websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { AnonymousSubject } from 'rxjs/internal/Subject';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst WS_URL = 'ws://127.0.0.1:9091/services';\n\nexport interface SentMessage {\n  topic: string;\n  type: string;\n}\nexport class ReceivedMessage implements SentMessage {\n  topic: string;\n  type: string;\n  content: Content;\n}\nexport interface Content {\n  nextMessageText: { DATIS: string; ENGLISH: string; SPANISH: string };\n  messageText: { DATIS: string; ENGLISH: string; SPANISH: string };\n  atisFields: AtisFields;\n  atisCode: string;\n  type: string;\n  fieldName: string;\n  value: string;\n  releaseTime: string;\n  nextIcaoCode: string;\n  fieldState: string;\n}\nexport interface AtisFields {\n  [key: string]: {\n    state: string;\n    name: string;\n    value: string;\n  };\n}\n@Injectable()\nexport class WebsocketService {\n  private subject: AnonymousSubject<MessageEvent>;\n  public messages: Subject<ReceivedMessage>;\n\n  constructor() {\n    this.messages = <Subject<ReceivedMessage>>this.connect(WS_URL).pipe(\n      map((response: MessageEvent): ReceivedMessage => {\n        console.log(JSON.parse(response.data));\n        let data = JSON.parse(response.data);\n        return data;\n      })\n    );\n  }\n\n  public connect(url): AnonymousSubject<MessageEvent> {\n    if (!this.subject) {\n      this.subject = this.create(url);\n      console.log('Successfully connected: ' + url);\n    }\n    return this.subject;\n  }\n\n  private create(url): AnonymousSubject<MessageEvent> {\n    let ws = new WebSocket(url);\n    let observable = new Observable((obs: Observer<MessageEvent>) => {\n      ws.onmessage = obs.next.bind(obs);\n      ws.onerror = obs.error.bind(obs);\n      ws.onclose = obs.complete.bind(obs);\n      return ws.close.bind(ws);\n    });\n    let observer = {\n      error: null,\n      complete: null,\n      next: (data: Object) => {\n        console.log('Message sent to websocket: ', data);\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify(data));\n        }\n      },\n    };\n    return new AnonymousSubject<MessageEvent>(observer, observable);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}