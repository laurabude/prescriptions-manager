{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/doctor.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"angular-calendar\";\nfunction DoctorInterfaceComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const patient_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", patient_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", patient_r1, \" \");\n  }\n}\nexport class DoctorInterfaceComponent {\n  constructor(doctorService) {\n    this.doctorService = doctorService;\n    this.selectedPatient = ''; // Define selectedPatient property\n    this.medication = ''; // Define medication property\n    this.dosage = ''; // Define dosage property\n    this.time = '';\n    this.patients = [];\n  }\n  ngOnInit() {\n    this.getPatients();\n  }\n  getPatients() {\n    this.doctorService.getPatients().subscribe(data => {\n      this.patients = data;\n      console.log(this.patients);\n    }, error => {\n      console.error('Error fetching patients:', error);\n    });\n  }\n  setPrescription() {\n    console.log(\"do\");\n    var form = {\n      username: this.selectedPatient,\n      medication: this.medication,\n      dosage: this.dosage,\n      time: this.time\n    };\n    this.doctorService.setPrescription(form).subscribe(data => {\n      console.log(data);\n    });\n  }\n  onDayClicked({\n    day\n  }) {\n    // Handle the day click event\n    const existingIndex = this.selectedDates.findIndex(date => this.isSameDay(date, day));\n    if (existingIndex > -1) {\n      this.selectedDates.splice(existingIndex, 1);\n    } else {\n      this.selectedDates.push(day);\n    }\n    console.log('Selected dates:', this.selectedDates);\n  }\n}\nDoctorInterfaceComponent.ɵfac = function DoctorInterfaceComponent_Factory(t) {\n  return new (t || DoctorInterfaceComponent)(i0.ɵɵdirectiveInject(i1.DoctorService));\n};\nDoctorInterfaceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DoctorInterfaceComponent,\n  selectors: [[\"app-doctor-interface\"]],\n  decls: 23,\n  vars: 7,\n  consts: [[\"for\", \"patientSelect\"], [\"id\", \"patientSelect\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"medication\"], [\"type\", \"text\", \"id\", \"medication\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"dosage\"], [\"type\", \"text\", \"id\", \"dosage\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"time\"], [\"type\", \"time\", \"id\", \"time\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"id\", \"datepicker\", \"placeholder\", \"Select dates\"], [3, \"viewDate\", \"events\", \"dayClicked\"], [3, \"click\"], [3, \"value\"]],\n  template: function DoctorInterfaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2, \"Doctor Interface\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"label\", 0);\n      i0.ɵɵtext(4, \"Select Patient:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"select\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function DoctorInterfaceComponent_Template_select_ngModelChange_5_listener($event) {\n        return ctx.selectedPatient = $event;\n      });\n      i0.ɵɵtemplate(6, DoctorInterfaceComponent_option_6_Template, 2, 2, \"option\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\")(8, \"label\", 3);\n      i0.ɵɵtext(9, \"Medication:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function DoctorInterfaceComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.medication = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\")(12, \"label\", 5);\n      i0.ɵɵtext(13, \"Dosage:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function DoctorInterfaceComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.dosage = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\")(16, \"label\", 7);\n      i0.ɵɵtext(17, \"Time to take medication:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function DoctorInterfaceComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.time = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(19, \"input\", 9);\n      i0.ɵɵelementStart(20, \"mwl-calendar-month-view\", 10);\n      i0.ɵɵlistener(\"dayClicked\", function DoctorInterfaceComponent_Template_mwl_calendar_month_view_dayClicked_20_listener($event) {\n        return ctx.onDayClicked($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function DoctorInterfaceComponent_Template_button_click_21_listener() {\n        return ctx.setPrescription();\n      });\n      i0.ɵɵtext(22, \"Set Prescription\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedPatient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.patients);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.medication);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.dosage);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.time);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"viewDate\", ctx.viewDate)(\"events\", ctx.events);\n    }\n  },\n  dependencies: [i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgModel, i3.NgForOf, i4.CalendarMonthViewComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","DoctorInterfaceComponent","constructor","doctorService","ngOnInit","getPatients","subscribe","data","patients","console","log","error","setPrescription","form","username","selectedPatient","medication","dosage","time","onDayClicked","day","existingIndex","selectedDates","findIndex","date","isSameDay","splice","push","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/lauraghimici/Documents/Automatica si Informatica Aplicata /MASTER/Anul 1/Sem 1/Proiect-semestru/frontend/src/app/doctor-interface/doctor-interface.component.html","/Users/lauraghimici/Documents/Automatica si Informatica Aplicata /MASTER/Anul 1/Sem 1/Proiect-semestru/frontend/src/app/doctor-interface/doctor-interface.component.ts"],"sourcesContent":["<div>\n    <h2>Doctor Interface</h2>\n    <label for=\"patientSelect\">Select Patient:</label>\n    <select id=\"patientSelect\" [(ngModel)]=\"selectedPatient\">\n      <option *ngFor=\"let patient of patients\" [value]=\"patient\">\n        {{ patient }}\n      </option>\n    </select>\n\n    <div>\n        <label for=\"medication\">Medication:</label>\n        <input type=\"text\" id=\"medication\" [(ngModel)]=\"medication\" />\n    </div>\n\n    <div>\n        <label for=\"dosage\">Dosage:</label>\n        <input type=\"text\" id=\"dosage\" [(ngModel)]=\"dosage\" />\n    </div>\n\n    <div>\n        <label for=\"time\">Time to take medication:</label>\n        <input type=\"time\" id=\"time\" [(ngModel)]=\"time\" />\n    </div>\n    <input type=\"text\" id=\"datepicker\" placeholder=\"Select dates\">\n    <mwl-calendar-month-view [viewDate]=\"viewDate\" [events]=\"events\" (dayClicked)=\"onDayClicked($event)\"></mwl-calendar-month-view>\n    <button (click)=\"setPrescription()\">Set Prescription</button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { DoctorService } from '../_services/doctor.service';\n\n@Component({\n  selector: 'app-doctor-interface',\n  templateUrl: './doctor-interface.component.html',\n  styleUrls: ['./doctor-interface.component.css']\n})\nexport class DoctorInterfaceComponent implements OnInit {\n\n  selectedPatient: string = ''; // Define selectedPatient property\n  medication: string = ''; // Define medication property\n  dosage: string = ''; // Define dosage property\n  time:string='';\n\n  patients: any[] = [];\n\n  constructor(private doctorService: DoctorService) { }\n\n  ngOnInit(): void {\n    this.getPatients();\n  }\n\n  getPatients() {\n    this.doctorService.getPatients().subscribe(\n      (data: any) => {\n        this.patients = data;\n        console.log(this.patients);\n      },\n      (error) => {\n        console.error('Error fetching patients:', error);\n      }\n    );\n  }\n  \n  \n\n  setPrescription() {\n    console.log(\"do\");\n    var form = {\n      username : this.selectedPatient,\n      medication: this.medication,\n      dosage: this.dosage,\n      time: this.time\n    }\n    this.doctorService.setPrescription(form).subscribe(\n      (data:any) => {\n        console.log(data);\n      }\n    )\n  }\n  onDayClicked({ day }: { day: Date }): void {\n    // Handle the day click event\n    const existingIndex = this.selectedDates.findIndex((date) =>\n      this.isSameDay(date, day)\n    );\n\n    if (existingIndex > -1) {\n      this.selectedDates.splice(existingIndex, 1);\n    } else {\n      this.selectedDates.push(day);\n    }\n\n    console.log('Selected dates:', this.selectedDates);\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}