{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.form = {\n      username: null,\n      email: null,\n      password: null,\n      pic: ''\n    };\n    this.userPhoto = '//ssl.gstatic.com/accounts/ui/avatar_2x.png';\n    this.isSuccessful = false;\n    this.isSignUpFailed = false;\n    this.errorMessage = '';\n    this.photos = ['/assets/photo.jpeg'];\n    this.showModal = false;\n    this.backgorund = document.getElementById('bkg');\n  }\n  ngOnInit() {\n    this.backgorund.style.backgroundImage = 'url(../assets/register.png)';\n    this.backgorund.style.backgroundSize = 'cover';\n  }\n  ngOnDestroy() {\n    this.backgorund.style.backgroundImage = '';\n  }\n  selectPhoto(photo) {\n    this.selectedPhoto = photo;\n  }\n  confirmSelection() {\n    if (this.selectedPhoto) {\n      this.form.pic = this.selectedPhoto;\n    }\n    this.closeModal();\n    this.userPhoto = this.selectedPhoto;\n  }\n  onSubmit() {\n    const {\n      username,\n      email,\n      password,\n      pic\n    } = this.form;\n    this.authService.register(username, email, password, pic).subscribe({\n      next: data => {\n        console.log(pic);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    });\n  }\n  openModal() {\n    if (!this.isSuccessful) this.showModal = true;\n  }\n  closeModal() {\n    this.showModal = false;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAkB5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAjB/B,SAAI,GAAQ;MACVC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,IAAI;MACdC,GAAG,EAAE;KACN;IACD,cAAS,GAAG,6CAA6C;IACzD,iBAAY,GAAG,KAAK;IACpB,mBAAc,GAAG,KAAK;IACtB,iBAAY,GAAG,EAAE;IACjB,WAAM,GAAa,CACjB,oBAAoB,CACrB;IAED,cAAS,GAAY,KAAK;IAE1B,eAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC;EACI;EAE/CC,QAAQ;IACN,IAAI,CAACC,UAAU,CAACC,KAAK,CAACC,eAAe,GAAG,6BAA6B;IACrE,IAAI,CAACF,UAAU,CAACC,KAAK,CAACE,cAAc,GAAG,OAAO;EAChD;EACAC,WAAW;IACT,IAAI,CAACJ,UAAU,CAACC,KAAK,CAACC,eAAe,GAAG,EAAE;EAC5C;EAEAG,WAAW,CAACC,KAAa;IACvB,IAAI,CAACC,aAAa,GAAGD,KAAK;EAC5B;EAEAE,gBAAgB;IACd,IAAI,IAAI,CAACD,aAAa,EAAE;MACtB,IAAI,CAACE,IAAI,CAACb,GAAG,GAAG,IAAI,CAACW,aAAa;;IAEpC,IAAI,CAACG,UAAU,EAAE;IACjB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,aAAa;EACrC;EAEAK,QAAQ;IACN,MAAM;MAAEnB,QAAQ;MAAEC,KAAK;MAAEC,QAAQ;MAAEC;IAAG,CAAE,GAAG,IAAI,CAACa,IAAI;IAEpD,IAAI,CAACjB,WAAW,CAACqB,QAAQ,CAACpB,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,CAAC,CAACkB,SAAS,CAAC;MAClEC,IAAI,EAAGC,IAAI,IAAI;QACbC,OAAO,CAACC,GAAG,CAACtB,GAAG,CAAC;QAChB,IAAI,CAACuB,YAAY,GAAG,IAAI;QACxB,IAAI,CAACC,cAAc,GAAG,KAAK;MAC7B,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACC,YAAY,GAAGD,GAAG,CAACD,KAAK,CAACG,OAAO;QACrC,IAAI,CAACJ,cAAc,GAAG,IAAI;MAC5B;KACD,CAAC;EACJ;EAEAK,SAAS;IACP,IAAI,CAAC,IAAI,CAACN,YAAY,EAAE,IAAI,CAACO,SAAS,GAAG,IAAI;EAC/C;EAEAhB,UAAU;IACR,IAAI,CAACgB,SAAS,GAAG,KAAK;EACxB;CACD;AA/DYpC,iBAAiB,eAL7BD,SAAS,CAAC;EACTsC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWvC,iBAAiB,CA+D7B;SA/DYA,iBAAiB","names":["Component","RegisterComponent","constructor","authService","username","email","password","pic","document","getElementById","ngOnInit","backgorund","style","backgroundImage","backgroundSize","ngOnDestroy","selectPhoto","photo","selectedPhoto","confirmSelection","form","closeModal","userPhoto","onSubmit","register","subscribe","next","data","console","log","isSuccessful","isSignUpFailed","error","err","errorMessage","message","openModal","showModal","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/lauraghimici/Documents/Automatica si Informatica Aplicata /MASTER/Anul 1/Sem 1/Proiect-semestru/frontend/src/app/register/register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css'],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form: any = {\r\n    username: null,\r\n    email: null,\r\n    password: null,\r\n    pic: '',\r\n  };\r\n  userPhoto = '//ssl.gstatic.com/accounts/ui/avatar_2x.png';\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  photos: string[] = [\r\n    '/assets/photo.jpeg',\r\n  ];\r\n  selectedPhoto: string;\r\n  showModal: boolean = false;\r\n  confirmedPhoto: string;\r\n  backgorund = document.getElementById('bkg');\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.backgorund.style.backgroundImage = 'url(../assets/register.png)';\r\n    this.backgorund.style.backgroundSize = 'cover';\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.backgorund.style.backgroundImage = '';\r\n  }\r\n\r\n  selectPhoto(photo: string): void {\r\n    this.selectedPhoto = photo;\r\n  }\r\n\r\n  confirmSelection(): void {\r\n    if (this.selectedPhoto) {\r\n      this.form.pic = this.selectedPhoto;\r\n    }\r\n    this.closeModal();\r\n    this.userPhoto = this.selectedPhoto;\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password, pic } = this.form;\r\n\r\n    this.authService.register(username, email, password, pic).subscribe({\r\n      next: (data) => {\r\n        console.log(pic);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      error: (err) => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      },\r\n    });\r\n  }\r\n\r\n  openModal(): void {\r\n    if (!this.isSuccessful) this.showModal = true;\r\n  }\r\n\r\n  closeModal(): void {\r\n    this.showModal = false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}