{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/doctor.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction DoctorInterfaceComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const patient_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", patient_r1.username);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", patient_r1.username, \" \");\n  }\n}\nexport class DoctorInterfaceComponent {\n  constructor(doctorService) {\n    this.doctorService = doctorService;\n    this.patients = []; // Fetch this data from the backend\n    this.selectedPatient = '';\n    this.medication = '';\n    this.dosage = '';\n  }\n  ngOnInit() {\n    // Fetch the list of patients when the component is initialized\n    this.fetchPatients();\n  }\n  fetchPatients() {\n    // Use the doctor service to fetch the list of patients from the backend\n    this.doctorService.getPatients().subscribe(data => {\n      this.patients = data;\n    });\n  }\n  setPrescription() {\n    // Use the doctor service to send prescription details to the backend\n    this.doctorService.setPrescription({\n      patient: this.selectedPatient,\n      medication: this.medication,\n      dosage: this.dosage\n    }).subscribe(response => {\n      // Handle the response from the backend (success or error)\n      console.log(response);\n    });\n  }\n}\nDoctorInterfaceComponent.ɵfac = function DoctorInterfaceComponent_Factory(t) {\n  return new (t || DoctorInterfaceComponent)(i0.ɵɵdirectiveInject(i1.DoctorService));\n};\nDoctorInterfaceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DoctorInterfaceComponent,\n  selectors: [[\"app-doctor-interface\"]],\n  decls: 17,\n  vars: 4,\n  consts: [[\"for\", \"patientSelect\"], [\"id\", \"patientSelect\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"medication\"], [\"type\", \"text\", \"id\", \"medication\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"dosage\"], [\"type\", \"text\", \"id\", \"dosage\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"value\"]],\n  template: function DoctorInterfaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2, \"Doctor Interface\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"label\", 0);\n      i0.ɵɵtext(4, \"Select Patient:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"select\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function DoctorInterfaceComponent_Template_select_ngModelChange_5_listener($event) {\n        return ctx.selectedPatient = $event;\n      });\n      i0.ɵɵtemplate(6, DoctorInterfaceComponent_option_6_Template, 2, 2, \"option\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\")(8, \"label\", 3);\n      i0.ɵɵtext(9, \"Medication:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function DoctorInterfaceComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.medication = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\")(12, \"label\", 5);\n      i0.ɵɵtext(13, \"Dosage:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function DoctorInterfaceComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.dosage = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function DoctorInterfaceComponent_Template_button_click_15_listener() {\n        return ctx.setPrescription();\n      });\n      i0.ɵɵtext(16, \"Set Prescription\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedPatient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.patients);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.medication);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.dosage);\n    }\n  },\n  dependencies: [i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgModel, i3.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IAIMA,iCAAoE;IAClEA,YACF;IAAAA,iBAAS;;;;IAFgCA,2CAA0B;IACjEA,eACF;IADEA,oDACF;;;ACEN,OAAM,MAAOC,wBAAwB;EAMnCC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IALjC,aAAQ,GAAU,EAAE,CAAC,CAAC;IACtB,oBAAe,GAAW,EAAE;IAC5B,eAAU,GAAW,EAAE;IACvB,WAAM,GAAW,EAAE;EAEgC;EAEnDC,QAAQ;IACN;IACA,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAA,aAAa;IACX;IACA,IAAI,CAACF,aAAa,CAACG,WAAW,EAAE,CAACC,SAAS,CAAEC,IAAS,IAAI;MACvD,IAAI,CAACC,QAAQ,GAAGD,IAAI;IACtB,CAAC,CAAC;EACJ;EAEAE,eAAe;IACb;IACA,IAAI,CAACP,aAAa,CAACO,eAAe,CAAC;MACjCC,OAAO,EAAE,IAAI,CAACC,eAAe;MAC7BC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,MAAM,EAAE,IAAI,CAACA;KACd,CAAC,CAACP,SAAS,CAAEQ,QAAa,IAAI;MAC7B;MACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ;;AA9BWd,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDRrCtB,2BAAK;MACGA,gCAAgB;MAAAA,iBAAK;MACzBA,gCAA2B;MAAAA,+BAAe;MAAAA,iBAAQ;MAClDA,iCAAyD;MAA9BA;QAAA;MAAA,EAA6B;MACtDA,+EAES;MACXA,iBAAS;MAETA,2BAAK;MACuBA,2BAAW;MAAAA,iBAAQ;MAC3CA,iCAA8D;MAA3BA;QAAA;MAAA,EAAwB;MAA3DA,iBAA8D;MAGlEA,4BAAK;MACmBA,wBAAO;MAAAA,iBAAQ;MACnCA,iCAAsD;MAAvBA;QAAA;MAAA,EAAoB;MAAnDA,iBAAsD;MAG1DA,kCAAoC;MAA5BA;QAAA,OAASuB,qBAAiB;MAAA,EAAC;MAACvB,iCAAgB;MAAAA,iBAAS;;;MAhBlCA,eAA6B;MAA7BA,6CAA6B;MAC1BA,eAAW;MAAXA,sCAAW;MAOFA,eAAwB;MAAxBA,wCAAwB;MAK5BA,eAAoB;MAApBA,oCAAoB","names":["i0","DoctorInterfaceComponent","constructor","doctorService","ngOnInit","fetchPatients","getPatients","subscribe","data","patients","setPrescription","patient","selectedPatient","medication","dosage","response","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/lauraghimici/Documents/Automatica si Informatica Aplicata /MASTER/Anul 1/Sem 1/Proiect-semestru/frontend/src/app/doctor-interface/doctor-interface.component.html","/Users/lauraghimici/Documents/Automatica si Informatica Aplicata /MASTER/Anul 1/Sem 1/Proiect-semestru/frontend/src/app/doctor-interface/doctor-interface.component.ts"],"sourcesContent":["<div>\n    <h2>Doctor Interface</h2>\n    <label for=\"patientSelect\">Select Patient:</label>\n    <select id=\"patientSelect\" [(ngModel)]=\"selectedPatient\">\n      <option *ngFor=\"let patient of patients\" [value]=\"patient.username\">\n        {{ patient.username }}\n      </option>\n    </select>\n\n    <div>\n        <label for=\"medication\">Medication:</label>\n        <input type=\"text\" id=\"medication\" [(ngModel)]=\"medication\" />\n    </div>\n\n    <div>\n        <label for=\"dosage\">Dosage:</label>\n        <input type=\"text\" id=\"dosage\" [(ngModel)]=\"dosage\" />\n    </div>\n\n    <button (click)=\"setPrescription()\">Set Prescription</button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { DoctorService } from '../_services/doctor.service';\n\n@Component({\n  selector: 'app-doctor-interface',\n  templateUrl: './doctor-interface.component.html',\n  styleUrls: ['./doctor-interface.component.css']\n})\nexport class DoctorInterfaceComponent implements OnInit {\n  patients: any[] = []; // Fetch this data from the backend\n  selectedPatient: string = '';\n  medication: string = '';\n  dosage: string = '';\n\n  constructor(private doctorService: DoctorService) {}\n\n  ngOnInit(): void {\n    // Fetch the list of patients when the component is initialized\n    this.fetchPatients();\n  }\n\n  fetchPatients(): void {\n    // Use the doctor service to fetch the list of patients from the backend\n    this.doctorService.getPatients().subscribe((data: any) => {\n      this.patients = data;\n    });\n  }\n\n  setPrescription(): void {\n    // Use the doctor service to send prescription details to the backend\n    this.doctorService.setPrescription({\n      patient: this.selectedPatient,\n      medication: this.medication,\n      dosage: this.dosage\n    }).subscribe((response: any) => {\n      // Handle the response from the backend (success or error)\n      console.log(response);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}